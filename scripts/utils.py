#!/bin/python
'''
Please do not edit this file. This file is used to setup the default data for the application.
This file is used to create the default device template, patient template, registration code template,
device, registration code, usage session, patient view and patient list.
'''
import os
import json
import urllib3
import urllib
import certifi
from dateutil import parser
from datetime import datetime, timedelta
from dotenv import load_dotenv
from pathlib import Path

# Loading all env variables from .env file
dotenvPath = Path('./.env.local')
load_dotenv(dotenv_path=dotenvPath)

PREDEFINED_DEVICE_TEMPLATE_JSON='predefined-device-template.json'
PREDEFINED_DEVICE_USAGE_TYPE_TEMPLATE_JSON='predefined-device-usege-type-template.json'
PREDEFINED_USAGE_TYPE_TABS_VIEW_JSON='predefined-usage-type-tabs-view.json'
PREDEFINED_PATIENT_VIEW_JSON='predefined-patient-view.json'
PREDEFINED_PATIENT_LIST_JSON='predefined-patient-list.json'

DOMAIN_URL = os.getenv('DOMAIN_URL')
MANUFACTURE_USER_NAME = os.getenv('MANUFACTURE_USER_NAME')
MANUFACTURE_USER_PASS = os.getenv('MANUFACTURE_USER_PASS')

# BioT API paths
UMS_USER_LOGIN_PATH = '/ums/v2/users/login'
SEATCH_MINIMIZE_TEMPLATE_BY_FILTER_PATH = '/settings/v1/templates/minimized?searchRequest='
SEATCH_TEMPLATE_BY_FILTER_PATH = '/settings/v1/templates?searchRequest='
SEATCH_ATTRIBUTE_BY_FILTER_PATH = '/settings/v1/attributes?searchRequest='
PORTAL_BUILDER_ORAGANIZATION_PORTAL_SETTINGS_PATH = '/settings/v1/portal-builder/ORGANIZATION_PORTAL/views'
TEMPLATE_BY_ID_PATH = '/settings/v1/templates/<templateId>'
DEVICES_PATH = '/device/v2/devices'
REGISTRATION_CODE_PATH = '/organization/v1/registration-codes'
CAREGIVER_PATH = '/organization/v1/users/caregivers'

DEFAULT_ORGANIZATION_ID = '00000000-0000-0000-0000-000000000000'
DEFAULT_DEVICE_TEMPLATE_NAME = 'Simulated App Device'
DEFAULT_USAGE_TYPE_IN_DEVICE_TEMPLATE = 'Simulation'
DEFAULT_PATIENT_TEMPLATE_NAME = 'Patient'
DEFAULT_CAREGIVER_TEMPLATE_NAME = 'Clinician'
DEFAULT_REGISTRATION_CODE_TEMPLATE_NAME = 'Registration Code'

DEFAULT_REGISTRATION_CODE = 'Code for Simulated App Device #1'
DEFAULT_DEVICE_ID = 'Simulated_App_Device_1'

# Measures to define
AVG_HR='avgHR'  # Integer attribute in Monitoring(by default) Usage Type Summary
AVG_HR_DISPLAY='Average HR'  
ECG='ecg'       # Waveform attribute in Patient Observetion Fields
ECG_DISPLAY='ECG'       
HR='hr'         # Integrer attribute in Patient Observetion Fields
HR_DISPLAY='HR'         
SPO2='spo2'     # Decimal attribute in Patient Observetion Fields
SPO2_DISPLAY='SpO2'     

# Init HTTP client
sslCerts = certifi.where()
http = urllib3.PoolManager(ca_certs=sslCerts)

accessToken = None
accessTokenExpiration = None

def encode_data_to_json_bytes(data):
    dataBytes = bytes(json.dumps(data), encoding="utf-8")
    return dataBytes

def json_from_response(res):
    jsonData = json.loads(res.data.decode('utf8'))
    return jsonData

def access_token_valid(token, exp):
    if token == None or exp == None:
        return False
    expTime = parser.parse(exp)
    timezone = expTime.tzinfo
    now = datetime.now(timezone)
    expireInSeconds = 2
    return now < expTime - timedelta(0, expireInSeconds)

def get_authorization():
    global accessToken, accessTokenExpiration
    if not access_token_valid(accessToken, accessTokenExpiration):
        url = f'{DOMAIN_URL}{UMS_USER_LOGIN_PATH}'
        body = encode_data_to_json_bytes({
            'username': MANUFACTURE_USER_NAME,
            'password': MANUFACTURE_USER_PASS,
        })
        headers = {
            'Content-Type': 'application/json',
        }
        print('Authorization sending request')
        res = http.request('POST', url, headers=headers, body=body, retries=False)
        if res.status == 200:
            data = json_from_response(res)
            accessJwt = data['accessJwt']
            accessToken = accessJwt['token']
            accessTokenExpiration = accessJwt['expiration']
            print(f'Access token recieved and will expire at: {accessTokenExpiration}')
        else:
            print('> Authentication failed')
            raise Exception(f'{res.status}: {res.data}')
    bearerToken = f'Bearer {accessToken}'
    return {
        'authorization': bearerToken,
        'accept': '*/*',
        'Content-Type': 'application/json'
    }

def find_device_template(name):
    print("\nSearching for default device template by name " + str(name))
    try:
        searchQuery = {
        "filter": {
                "name": {
                    "eq": name.replace(' ', '_')
                },
                "entityTypeName": {
                    "eq": "device"
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{SEATCH_MINIMIZE_TEMPLATE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                print(f'> The temlate {name} was found.')
                return data['data'][0]
            return None
        else:
            print('ERROR: while fetching template or creating template, please check if default device tempalte name is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def create_device_template():
    print('> Creating device template')
    with open(PREDEFINED_DEVICE_TEMPLATE_JSON, 'r') as f:
        data = json.load(f)
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}'
        res = http.request('POST', url, headers=get_authorization(), body=encode_data_to_json_bytes(data), retries=False)
        if res.status >= 200 and res.status < 300:
            print("> Template created.")
            data = json_from_response(res)
            return data
        else:
            print('> ERROR: can\'t create device template')
            raise Exception(f'{res.status}: {res.data}')


def find_usage_type_template_by_parent_id(parentTemplateId):
    print("\nSearching for usege type template by parent template id " + str(parentTemplateId))
    try:
        searchQuery = {
        "filter": {
                "parentTemplateId": {
                    "in": [parentTemplateId]
                },
                "name": {
                    "eq": DEFAULT_USAGE_TYPE_IN_DEVICE_TEMPLATE.lower()
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                print(f'> The temlate {DEFAULT_USAGE_TYPE_IN_DEVICE_TEMPLATE} is already exists.\n> Make sure the usage type contains {AVG_HR} integer attribute in summary.')
                return data['data'][0]
            return create_usage_type_template(parentTemplateId)
        else:
            print('> Template not found, please check if default device tempalte name is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def create_usage_type_template(parentTemplateId):
    print("\nCreating usage type template")
    with open(PREDEFINED_DEVICE_USAGE_TYPE_TEMPLATE_JSON, 'r') as f:
        data = json.load(f)
        data['parentTemplateId'] = parentTemplateId
        data['ownerOrganizationId'] = DEFAULT_ORGANIZATION_ID
        buildInAttrs = data['builtInAttributes']
        attr = find_attribute(AVG_HR)
        if attr == None:
            print('> ERROR: can\'t find attribute for linking')
            raise Exception('Can\'t find attribute for linking')
        data['customAttributes'][0]['linkConfiguration']['templateId'] = attr['templateId']
        data['customAttributes'][0]['linkConfiguration']['attributeId'] = attr['id']
        index = [i for i, x in enumerate(buildInAttrs) if x["name"] == "_device"][0]
        print('> Index of device ' + str(index))
        data['builtInAttributes'][index]['referenceConfiguration']['validTemplatesToReference'].append(parentTemplateId)
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}'
        res = http.request('POST', url, headers=get_authorization(), body=encode_data_to_json_bytes(data), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print("> Usage Type Template created.")
            return data
        else:
            print('> ERROR: can\'t create device template')
            raise Exception(f'{res.status}: {res.data}')
        
def find_attribute(attributeName):
    print("> Searching for by name " + str(attributeName))
    try:
        searchQuery = {
            "freeTextSearch":"",
            "limit":50,"page":0,
            "filter":{
                "category":{
                    "in":["MEASUREMENT"]
                }
            }
        }
            
        url = f'{DOMAIN_URL}{SEATCH_ATTRIBUTE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                for i in range(len(data['data'])):
                    if data['data'][i]['name'] == attributeName:
                        print('> Attribute found')
                        return data['data'][i]
            print('> Attribute not found, please check if patient tempalte if attribute is defined in BioT Console')
            return None
        else:
            print('Attribute not found, please check if patient tempalte if attribute is defined in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def find_patient_template():
    print("\nSearching for default patient template by name " + str(DEFAULT_PATIENT_TEMPLATE_NAME))
    try:
        searchQuery = {
        "filter": {
                "name": {
                    "eq": DEFAULT_PATIENT_TEMPLATE_NAME
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                print('> Default patient template found')
                return data['data'][0]
            print('> Template not found, please check if default patient tempalte name is correct in .env file and in BioT Console')
            return None
        else:
            print('Template not found, please check if default patient tempalte name is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def update_patient_template(patientTemplate):
    print("\nUpdating patient template")
    try:
        buildInAttributes = patientTemplate['builtInAttributes']
        for i in range(len(buildInAttributes)):
            if buildInAttributes[i]['displayName'] == 'Caregiver':
                buildInAttributes[i]['validation']['mandatory'] = False
            elif buildInAttributes[i]['displayName'] == 'Date of Birth':
                buildInAttributes[i]['validation']['mandatory'] = False
            elif buildInAttributes[i]['displayName'] == 'Gender':
                buildInAttributes[i]['validation']['mandatory'] = False
        customAttributes= [
        {
            "name": ECG,
            "displayName": ECG_DISPLAY,
            "category": "MEASUREMENT",
            "type": "WAVEFORM",
            "numericMetaData": {
                "subType": "DECIMAL"
            }
        },
        {
            "name": HR,
            "displayName": HR_DISPLAY,
            "category": "MEASUREMENT",
            "type": "INTEGER",
            "numericMetaData": {
                "units": "BPM"
            }
        },
        {
            "name": AVG_HR,
            "displayName": AVG_HR_DISPLAY,
            "category": "MEASUREMENT",
            "type": "INTEGER",
            "numericMetaData": {
                "units": "BPM"
            }
        },
        {
            "name": SPO2,
            "displayName": SPO2_DISPLAY,
            "category": "MEASUREMENT",
            "type": "DECIMAL",
            "numericMetaData": {
                "units": "%"
            }
        }]
        templateAttributes = patientTemplate['templateAttributes']
        templateAttributes[0]['organizationSelectionConfiguration'] = templateAttributes[0]['organizationSelection']
        templateAttributes[0]['organizationSelectionConfiguration']['all'] = True
        templateAttributes[0]['value'] = ["SELF","ANONYMOUS"];
        updateBody = {
            'builtInAttributes': buildInAttributes,
            'templateAttributes': templateAttributes,
            'description': patientTemplate['description'],
            'displayName': patientTemplate['displayName'],
            'name': patientTemplate['name'],
            'ownerOrganizationId': patientTemplate['ownerOrganizationId'],
            'parentTemplateId': patientTemplate['parentTemplateId'],
            'customAttributes': customAttributes
        }
        id = patientTemplate['id']
        url = f'{DOMAIN_URL}{TEMPLATE_BY_ID_PATH.replace("<templateId>", id)}'
        res = http.request('PUT', url, headers=get_authorization(), body=encode_data_to_json_bytes(updateBody), retries=False)
        if res.status == 200:
            print("> Patient template updated. Added " + HR + ", " + SPO2 + ", " + ECG + " attributes")
            return
        else:
            print('> ERROR: can\'t update Patient template')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def create_device_with_templateId(deviceTemplateId, registrationCodeId):
    print('\nCreate default device in default organization')
    try:
        device = {
            '_id': str(DEFAULT_DEVICE_ID),
            '_templateId': str(deviceTemplateId),
            '_patient': None,
            '_ownerOrganization': {
                'id': DEFAULT_ORGANIZATION_ID
            },
            '_registrationCode': {
                'id': str(registrationCodeId)
            }
        }
        url = f'{DOMAIN_URL}{DEVICES_PATH}'
        res = http.request('POST', url, headers=get_authorization(), body=encode_data_to_json_bytes(device), retries=False)
        if res.status >= 200 and res.status < 300:
            print("> Device created with id: " + DEFAULT_DEVICE_ID)
            return
        else:
            print('> ERROR: failed to create device')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def find_registration_code_template():
    print("\nSearching for default registration code template by name " + str(DEFAULT_REGISTRATION_CODE_TEMPLATE_NAME))
    try:
        searchQuery = {
        "filter": {
                "name": {
                    "eq": DEFAULT_REGISTRATION_CODE_TEMPLATE_NAME.replace(' ', '')
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                print('> Default registration code template found')
                return data['data'][0]
            print('> Template not found, please check if default egistration code tempalte name is correct in .env file and in BioT Console')
            return None
        else:
            print('Template not found, please check if default egistration code tempalte name is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def create_organization_registraion_code(templateId):
    print('\nCreate organization registration code in default organization')
    try:
        registraionCode = {
            "_ownerOrganization":{
                "id": DEFAULT_ORGANIZATION_ID,
            },
            "_code": DEFAULT_REGISTRATION_CODE,
            "_templateId": templateId
        }
        url = f'{DOMAIN_URL}{REGISTRATION_CODE_PATH}'
        res = http.request('POST', url, headers=get_authorization(), body=encode_data_to_json_bytes(registraionCode), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print('------------------------------------------------------------------')
            print("> Created registraion code: " + data['_code'])
            print('------------------------------------------------------------------')
            return data
        else:
            print('> Code already exists.')
            return get_existing_code()
    except Exception as e:
        print(e)
        return None
    
def get_existing_code():
    print("\nSearching for existing registration code " + str(DEFAULT_REGISTRATION_CODE))
    try:
        searchQuery = {
            "filter": {
                "_ownerOrganizationId": {
                    "in": [DEFAULT_ORGANIZATION_ID]
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{REGISTRATION_CODE_PATH}?searchRequest={urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            print(data)
            if len(data['data']) > 0:
                print('> Registration code found')
                return data['data'][0]
            print('> Registration code not found, please check if default registration code is correct in .env file and in BioT Console')
            return None
        else:
            print('Registration code not found, please check if default registration code is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def portal_builder_simulation_usage_session():
    print("\nConfigure Organization portal - Usage Type - Simulation - Template List")
    with open(PREDEFINED_USAGE_TYPE_TABS_VIEW_JSON, 'r') as f:
        data = json.load(f)
        view = find_view('simulation')
        url = f'{DOMAIN_URL}{PORTAL_BUILDER_ORAGANIZATION_PORTAL_SETTINGS_PATH}/{view["id"]}'
        res = http.request('PUT', url, headers=get_authorization(), body=encode_data_to_json_bytes(data), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print("> Organization portal - Usage Type - Simulation - Template List updated")
            return data
        else:
            print('> ERROR: can\'t update Organization pPortal - Usage Type - Simulation - Template List')
            raise Exception(f'{res.status}: {res.data}')

def portal_builder_patient_view():
    print("\nConfigure Organization portal - Patient - Patient - Add, Edit, Expand")
    with open(PREDEFINED_PATIENT_VIEW_JSON, 'r') as f:
        data = json.load(f)
        view = find_view('Patient', 'TEMPLATE_EXPAND')
        url = f'{DOMAIN_URL}{PORTAL_BUILDER_ORAGANIZATION_PORTAL_SETTINGS_PATH}/{view["id"]}'
        res = http.request('PUT', url, headers=get_authorization(), body=encode_data_to_json_bytes(data), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print("> Organization portal - Patient - Patient - Add, Edit, Expand updated")
            return data
        else:
            print('> ERROR: can\'t update Organization portal - Patient - Patient - Add, Edit, Expand')
            raise Exception(f'{res.status}: {res.data}')
        
def portal_builder_patient_list():
    print("\nConfigure Organization portal - Patient - List")
    with open(PREDEFINED_PATIENT_LIST_JSON, 'r') as f:
        data = json.load(f)
        view = find_view(viewName=None, type='ENTITY_LIST', entityTypeName='patient')
        url = f'{DOMAIN_URL}{PORTAL_BUILDER_ORAGANIZATION_PORTAL_SETTINGS_PATH}/{view["id"]}'
        res = http.request('PUT', url, headers=get_authorization(), body=encode_data_to_json_bytes(data), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print("> Organization portal - Patient - Patient - Add, Edit, Expand updated")
            return data
        else:
            print('> ERROR: can\'t update Organization portal - Patient - Patient - Add, Edit, Expand')
            raise Exception(f'{res.status}: {res.data}')

def find_view(viewName=None, type='TEMPLATE_LIST', entityTypeName=''):
    print('\nSearching for portal builder view')
    try:
        url = f'{DOMAIN_URL}{PORTAL_BUILDER_ORAGANIZATION_PORTAL_SETTINGS_PATH}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['views']) > 0:
                views = data['views']
                for i in range(len(views)):
                    if viewName and views[i]['template'] != None and views[i]['template']['name'] == viewName and views[i]['type'] == type:
                        return views[i] 
                    elif entityTypeName and views[i]['entityTypeName'] == entityTypeName and views[i]['type'] == type:
                        return views[i]
            print('> View ' + viewName + ' not found')
            return None
        else:
            print('> View ' + viewName + ' not found')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def delete_default_device_template():
    print('\nDeleting default device template')
    try:
        deviceTemplateSearchResult = find_device_template("DeviceType1")
        if deviceTemplateSearchResult == None:
            print(">> The device template already deleted.")
            return
        url = f'{DOMAIN_URL}{TEMPLATE_BY_ID_PATH.replace("<templateId>", deviceTemplateSearchResult["id"])}'
        res = http.request('DELETE', url, headers=get_authorization(), retries=False)
        if res.status >= 200 and res.status < 300:
            print("> Default Device Template Deleted")
            return
        else:
            print('> ERROR: can\'t delete default device template')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

def create_defaul_caregiver():
    print('\nCreate caregiver in default organization')
    try:
        caregiverTemplate = find_caregiver_template()
        if (caregiverTemplate == None):
            print('> Caregiver template not exists')
            return None
        email = MANUFACTURE_USER_NAME
        parts = email.split('@')
        email = parts[0] + '+caregiver@' + parts[1]
        caregiver = {
            "_ownerOrganization":{
                "id": DEFAULT_ORGANIZATION_ID,
            },
            "_name":{
	            "firstName":"Care",
	            "lastName":"Giver"
            },
            "_employeeId":"1",
            "_email": email,
            "_templateId": caregiverTemplate['id']
        }
        headers = get_authorization()
        headers['email-confirmation-landing-page'] = 'https://organization.app.<base_url>/auth/invitation'.replace('<base_url>', DOMAIN_URL.replace('https://api.', ''))
        url = f'{DOMAIN_URL}{CAREGIVER_PATH}'
        res = http.request('POST', url, headers=headers, body=encode_data_to_json_bytes(caregiver), retries=False)
        if res.status >= 200 and res.status < 300:
            data = json_from_response(res)
            print("> Caregiver created")
            return data
        else:
            print('> Can\'t create caregiver')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)
        return None

def find_caregiver_template():
    print("\nSearching for default caregiver template by name " + str(DEFAULT_CAREGIVER_TEMPLATE_NAME))
    try:
        searchQuery = {
        "filter": {
                "name": {
                    "eq": DEFAULT_CAREGIVER_TEMPLATE_NAME
                }
            },
            "limit": 1,
            "page": 0
        }
        url = f'{DOMAIN_URL}{SEATCH_TEMPLATE_BY_FILTER_PATH}{urllib.parse.quote_plus(json.dumps(searchQuery))}'
        res = http.request('GET', url, headers=get_authorization(), retries=False)
        if res.status == 200:
            data = json_from_response(res)
            if len(data['data']) > 0:
                print('> Default caregiver template found')
                return data['data'][0]
            print('> Template not found, please check if default caregiver tempalte name is correct in .env file and in BioT Console')
            return None
        else:
            print('Template not found, please check if default caregiver tempalte name is correct in .env file and in BioT Console')
            raise Exception(f'{res.status}: {res.data}')
    except Exception as e:
        print(e)

